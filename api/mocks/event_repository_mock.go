// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	model "ticketon-auth-service/api/model"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: value
func (_m *EventRepository) Create(value interface{}) *gorm.DB {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// First provides a mock function with given fields: value
func (_m *EventRepository) First(value string) (*model.EventBasic, error) {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 *model.EventBasic
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.EventBasic, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(string) *model.EventBasic); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventBasic)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: value
func (_m *EventRepository) Save(value interface{}) *gorm.DB {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Update provides a mock function with given fields: value
func (_m *EventRepository) Update(value interface{}) *gorm.DB {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(interface{}) *gorm.DB); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// NewEventRepository creates a new instance of EventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventRepository {
	mock := &EventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
